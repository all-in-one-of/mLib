//
// VEX Code Generated by Houdini 14.0.395
// Date: Tue Aug 25 18:47:05 2015
// File: /home/microbot/Documents/HoudiniRoot2015/CityBuilderPOC/CompDevelopment
// Node: /vex/Voronoi2
//

#ifndef VOP_OP
#define VOP_OP
#endif
#ifndef VOP_COP2
#define VOP_COP2
#endif

#pragma opname Voronoi2
#pragma oplabel Voronoi2
#pragma opmininputs 0
#pragma opmaxinputs 0
#pragma ramp_rgb ramp ramp_the_basis_strings ramp_the_key_positions ramp_the_key_values
#pragma label	ramp	""
#pragma parmtag  ramp rampbasisdefault linear
#pragma parmtag  ramp rampshowcontrolsdefault 1
#pragma parmtag  ramp rampcolortype rgb
#pragma label	outputSelect	"Output Selector"
#pragma hint	outputSelect	joinnext
#pragma range	outputSelect	0	10
#pragma choice	outputSelect	"0"	"Cell"
#pragma choice	outputSelect	"1"	"Voronoi"
#pragma choice	outputSelect	"2"	"Worley"
#pragma choice	outputSelect	"3"	"HextileVoronoi"
#pragma choice	outputSelect	"4"	"HextileVoronoi2"
#pragma choice	outputSelect	"5"	"Boxtile"
#pragma label	offset	Offset
#pragma hidewhen	offset	{ outputSelect != 1 }
#pragma label	offset2	Offset
#pragma hidewhen	offset2	{ outputSelect != 2 }
#pragma label	swidth	"S Width"
#pragma range	swidth	0	1
#pragma hidewhen	swidth	{ outputSelect != 3 } { outputSelect != 4 }
#pragma label	twidth	"T Width"
#pragma range	twidth	0	1
#pragma hidewhen	twidth	{ outputSelect != 3 } { outputSelect != 4 }
#pragma label	soff	"S Offset"
#pragma range	soff	0	1
#pragma hidewhen	soff	{ outputSelect != 3 } { outputSelect != 4 }
#pragma label	toff	"T Offset"
#pragma range	toff	0	1
#pragma hidewhen	toff	{ outputSelect != 3 } { outputSelect != 4 }
#pragma label	trans	Translate
#pragma hidewhen	trans	{ outputSelect != 5 }
#pragma label	rot	Rotate
#pragma hidewhen	rot	{ outputSelect != 5 }
#pragma label	scale	Scale
#pragma hidewhen	scale	{ outputSelect != 5 }
#pragma label	swidth2	"S Width"
#pragma range	swidth2	0	1
#pragma hidewhen	swidth2	{ outputSelect != 5 }
#pragma label	twidth2	"T Width"
#pragma range	twidth2	0	1
#pragma hidewhen	twidth2	{ outputSelect != 5 }
#pragma label	soff2	"S Offset"
#pragma range	soff2	0	1
#pragma hidewhen	soff2	{ outputSelect != 5 }
#pragma label	toff2	"T Offset"
#pragma range	toff2	0	1
#pragma hidewhen	toff2	{ outputSelect != 5 }
#pragma label	stagger	Stagger
#pragma range	stagger	0	1
#pragma hidewhen	stagger	{ outputSelect != 5 }
#pragma label	jitter	Randomness
#pragma range	jitter	0	1
#pragma hidewhen	jitter	{ outputSelect != 5 }
#pragma label	destmin	"Minimum S Size"
#pragma range	destmin	0	1
#pragma hidewhen	destmin	{ outputSelect != 5 }
#pragma label	destmax	"Maximum S Size"
#pragma range	destmax	0	1
#pragma hidewhen	destmax	{ outputSelect != 5 }
#pragma label	destmin2	"Minimum T Size"
#pragma range	destmin2	0	1
#pragma label	destmax2	"Maximum T Size"
#pragma range	destmax2	0	1
#pragma label	soff3	"S Offset"
#pragma range	soff3	0	1
#pragma hidewhen	soff3	{ outputSelect !=5 }
#pragma label	toff3	"T Offset"
#pragma range	toff3	0	1
#pragma hidewhen	toff3	{ outputSelect !=5 }
#pragma label	stagger2	Stagger
#pragma range	stagger2	0	1
#pragma hidewhen	stagger2	{ outputSelect !=5 }
#pragma label	jitter2	Randomness
#pragma range	jitter2	0	1
#pragma hidewhen	jitter2	{ outputSelect !=5 }


#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>

#include <voptype.h>
#include <voplib.h>
cop2
Voronoi2(string ramp_the_basis_strings[]={"linear","linear"}; float ramp_the_key_positions[]={0,1}; vector ramp_the_key_values[]={{ 0, 0, 0 },{ 1, 1, 1 }};
	int outputSelect = 5;
	vector offset = { 0, 0, 0 };
	vector offset2 = { 0, 0, 0 };
	float swidth = 0.17299999999999999;
	float twidth = 0.17130000000000001;
	float soff = 0.40639999999999998;
	float toff = 0.41810000000000003;
	vector trans = { 0, 0, 0 };
	vector rot = { 0, 0, 30 };
	vector scale = { 1, 1, 1 };
	float swidth2 = 0.22839999999999999;
	float twidth2 = 0.22750000000000001;
	float soff2 = 0;
	float toff2 = 0;
	float stagger = 0.5;
	float jitter = 1;
	float destmin = 0.0118;
	float destmax = 0.30309999999999998;
	float destmin2 = 0.183;
	float destmax2 = 0.3216;
	float soff3 = 0;
	float toff3 = 0;
	float stagger2 = 0.5;
	float jitter2 = 10)
{
    vector	ramp1;
    string	ramp_the_color_space;
    vector	vec;
    vector	Value;
    vector	diff;
    float	fval1;
    float	fval2;
    float	fval3;
    float	dist;
    float	complem;
    vector	scaled;
    float	fval11;
    float	fval21;
    float	fval31;
    float	border;
    float	dist1;
    float	dist2;
    float	scenter;
    float	tcenter;
    int	id;
    vector	vec1;
    float	dist11;
    float	dist21;
    vector	near1;
    vector	near2;
    int	seed;
    float	dist12;
    float	dist22;
    float	dist3;
    float	dist4;
    int	seed1;
    float	output1;
    vector	vec2;
    int	id1;
    float	ss1;
    float	tt1;
    vector	vec3;
    float	dist13;
    float	dist23;
    vector	near11;
    vector	near21;
    int	seed2;
    vector	product;
    vector	scaled1;
    float	dist14;
    float	dist24;
    vector	near12;
    vector	near22;
    int	seed3;
    vector	sum;
    vector	xformpos;
    float	fval12;
    float	fval22;
    float	fval32;
    int	id2;
    float	ss2;
    float	tt2;
    int	added;
    float	rand;
    float	shift;
    int	added1;
    float	rand1;
    float	shift1;
    int	id3;
    float	ss3;
    float	tt3;
    vector	vec4;
    vector	result;
    vector	rand2;
    float	fval13;
    float	fval23;
    float	fval33;
    
    // Code produced by: floattovec1
    vec = vop_floattovec(X, Y, 0);
    
    // Code produced by: const2
    Value = { 0.5, 0.5, 0 };
    
    // Code produced by: subtract1
    diff = vec - Value;
    
    // Code produced by: vectofloat2
    vop_vectofloat(diff, fval1, fval2, fval3);
    
    // Code produced by: distance1
    dist = distance(vec, Value);
    
    // Code produced by: complement1
    complem = -dist;
    complem += 1;
    
    // Code produced by: ramp1
    ramp_the_color_space = "rgb";
    ramp1 = spline(ramp_the_basis_strings, complem, ramp_the_key_values, ramp_the_key_positions, "colorspace", "cspace:rgb");
    
    // Code produced by: mulconst1
    scaled = ramp1 * 15;
    
    // Code produced by: vectofloat3
    vop_vectofloat(scaled, fval11, fval21, fval31);
    
    // Code produced by: cellnoise1
    float ss, tt;
    vop_bindST(ss, fval1, 1, tt, fval2, 1);
    border = vop_aaCell2D(ss * fval11 - 0, tt * fval21 - 0,
                           1, 1, 0.024299999999999999, 1,
                           scenter, tcenter, dist1, dist2, id);
    scenter = (scenter + 0)/fval11;
    tcenter = (tcenter + 0)/fval21;
    
    // Code produced by: inttovec1
    vec1 = set((float) id, (float) id, (float) id);
    
    // Code produced by: Cell
    // No change to input vec (vec1)
    
    // Code produced by: voronoise1
    if (0)
    {
        vop_vnoise(diff * scaled - offset, { 1, 1, 1 }, seed, dist11, dist21,
                   near1, near2, vector());
    }
    else
    {
        vop_vnoise(diff * scaled - offset, { 1, 1, 1 }, seed, dist11, dist21,
                   near1, near2);
    }
    
    // Code produced by: Voronoi
    // No change to input near1 (near1)
    
    // Code produced by: worleynoise1
    // initialize outputs
    dist12 = 0;
    dist22 = 0;
    dist3 = 0;
    dist4 = 0;
    
    if (1) {
        wnoise(diff * scaled - offset2, seed1, dist12, dist22, dist3, dist4);
    } else {
        wnoise(diff * scaled - offset2, seed1, dist12, dist22);
    }
    
    // Code produced by: autoconvert
    output1 = seed1;
    
    // Code produced by: floattovec2
    vec2 = vop_floattovec(dist3, dist12, output1);
    
    // Code produced by: Worley
    // No change to input vec (vec2)
    
    // Code produced by: hextile1
    vop_bindST(ss1, fval1, 1, tt1, fval2, 1);
    id1 = vop_HexTileGen(ss1, tt1, 1.0/swidth, 1.0/twidth,
                         soff, toff);
    
    // Code produced by: inttovec2
    vec3 = set((float) id1, (float) id1, (float) id1);
    
    // Code produced by: voronoise3
    if (1)
    {
        vop_vnoise(diff * scaled - vec3, vec3, seed2, dist13, dist23,
                   near11, near21, vec3);
    }
    else
    {
        vop_vnoise(diff * scaled - vec3, vec3, seed2, dist13, dist23,
                   near11, near21);
    }
    
    // Code produced by: Hextile_Voronoi
    // No change to input near1 (near11)
    
    // Code produced by: multiply1
    product = near1 * vec3;
    
    // Code produced by: mulconst4
    scaled1 = diff * 7.4100000000000001;
    
    // Code produced by: voronoise2
    if (0)
    {
        vop_vnoise(scaled1 * { 1, 1, 1 } - { 0, 0, 0 }, { 1, 1, 1 }, seed3, dist14, dist24,
                   near12, near22, vector());
    }
    else
    {
        vop_vnoise(scaled1 * { 1, 1, 1 } - { 0, 0, 0 }, { 1, 1, 1 }, seed3, dist14, dist24,
                   near12, near22);
    }
    
    // Code produced by: add1
    sum = product + near12;
    
    // Code produced by: Hextile_Voronoi_Multiply
    // No change to input sum (sum)
    
    // Code produced by: xform1
    xformpos = diff * maketransform(0,0,trans,rot,scale,{ 0, 0, 0 });
    
    // Code produced by: vectofloat4
    vop_vectofloat(xformpos, fval12, fval22, fval32);
    
    // Code produced by: boxtile2
    vop_bindST(ss2, fval12, 1, tt2, fval22, 1);
    id2 = vop_TileGen(ss2, tt2, 1.0/swidth2, 1.0/twidth2,
                      soff2, toff2, stagger, jitter);
    
    // Code produced by: addconst1
    added = id2 + 4;
    
    // Code produced by: random3
    #ifdef __vex
        if (1)
        	rand = random(added);
        else
           rand = rand(added);
    #else
        rand = cellnoise(added);
    #endif
    
    // Code produced by: fit1
    shift = vop_fit(rand, 0, 1, destmin, destmax);
    
    // Code produced by: addconst2
    added1 = id2 + 2;
    
    // Code produced by: random4
    #ifdef __vex
        if (1)
        	rand1 = random(added1);
        else
           rand1 = rand(added1);
    #else
        rand1 = cellnoise(added1);
    #endif
    
    // Code produced by: fit2
    shift1 = vop_fit(rand1, 0, 1, destmin2, destmax2);
    
    // Code produced by: boxtile1
    vop_bindST(ss3, fval12, 1, tt3, fval22, 1);
    id3 = vop_TileGen(ss3, tt3, 1.0/shift, 1.0/shift1,
                      soff3, toff3, stagger2, jitter2);
    
    // Code produced by: inttovec3
    vec4 = set((float) id3, (float) id3, (float) id3);
    
    // Code produced by: Boxtile
    // No change to input vec (vec4)
    
    // Code produced by: switch1
    if( outputSelect == 0 )
        result = vec1;
    else if( outputSelect == 1 )
        result = near1;
    else if( outputSelect == 2 )
        result = vec2;
    else if( outputSelect == 3 )
        result = near11;
    else if( outputSelect == 4 )
        result = sum;
    else
        result = vec4;
    
    // Code produced by: random1
    #ifdef __vex
        if (1)
        	rand2 = random(result);
        else
           rand2 = rand(result);
    #else
        rand2 = cellnoise(result);
    #endif
    
    // Code produced by: vectofloat1
    vop_vectofloat(rand2, fval13, fval23, fval33);
    
    // Code produced by: output1
    float tempR = fval13;
    float tempG = fval23;
    float tempB = fval33;
    R = tempR;
    G = tempG;
    B = tempB;
}
